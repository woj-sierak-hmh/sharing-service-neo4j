// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`shares createShare 1`] = `"MERGE (org:Organization {orgRefId: {tenantRefId}}) MERGE (asset:Asset {assetRefId: {assetRefId}, assetType: {assetType}, isActive: \\"true\\"}) MERGE (org)-[:MASTER_OF]->(asset) MERGE (creator:User {userRefId: {sharerRefId}}) MERGE (creator)-[:CREATOR_OF]->(asset) FOREACH (ref IN {recipients} |   MERGE (recipient:User {userRefId: ref})   MERGE (asset)-[:SHARED_WITH {type:\\"READ\\", createdDate: $createdDate}]->(recipient))"`;

exports[`shares createShare 2`] = `
Object {
  "assetRefId": "assetRefId",
  "assetType": "assetType",
  "createdDate": Any<String>,
  "recipients": "recipients",
  "sharerRefId": "sharerRefId",
  "tenantRefId": "tenantRefId",
}
`;

exports[`shares getShares 1`] = `
Array [
  "MATCH (:User {userRefId: {userRefId}})<-[share:SHARED_WITH]-(asset:Asset {assetType: {assetType}})<-[:MASTER_OF]-(:Organization {orgRefId: {tenantRefId}}) WITH share, asset MATCH (asset)<-[:CREATOR_OF]-(owner:User) RETURN asset.assetRefId AS assetRefId, asset.assetType AS assetType, share.createdDate AS shareDate, owner.userRefId AS sharerRefId ORDER BY shareDate DESC",
  Object {
    "assetType": "assetType",
    "tenantRefId": "tenantRefId",
    "userRefId": "userRefId",
  },
]
`;

exports[`shares getShares 2`] = `
Array [
  Object {
    "assetRefId": "assetRefId0",
    "assetType": "assetType0",
    "shareDate": "shareDate0",
    "shareRefId": "sharerRefId0",
  },
  Object {
    "assetRefId": "assetRefId1",
    "assetType": "assetType1",
    "shareDate": "shareDate1",
    "shareRefId": "sharerRefId1",
  },
  Object {
    "assetRefId": "assetRefId2",
    "assetType": "assetType2",
    "shareDate": "shareDate2",
    "shareRefId": "sharerRefId2",
  },
]
`;
